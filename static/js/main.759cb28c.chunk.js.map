{"version":3,"sources":["Cell.js","Board.js","App.js","index.js"],"names":["Cell","_ref","flipCellsAroundMe","classes","isLit","react_default","a","createElement","className","onClick","evt","Board","nrows","ncols","chanceLightStartsOn","_useState","useState","board","i","row","j","push","Math","random","createBoard","_useState2","Object","slicedToArray","setBoard","_useState3","_useState4","hasWon","setHasWon","flipCellsAround","coord","console","log","newBoard","slice","_coord$split$map","split","map","Number","_coord$split$map2","y","x","flipCell","every","n","tblBoard","_loop","concat","src_Cell_0","key","App","src_Board_0","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"oQAkBeA,SAfF,SAAAC,GAAkC,IAA/BC,EAA+BD,EAA/BC,kBAMVC,EAAU,QAN+BF,EAAZG,MAMD,YAAc,IAE9C,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAASM,QAPN,SAACC,GACnBR,SCgFWS,SAlFD,SAAAV,GAsDZ,IAtDuD,IAAxCW,EAAwCX,EAAxCW,MAAOC,EAAiCZ,EAAjCY,MAAOC,EAA0Bb,EAA1Ba,oBAA0BC,EAa7BC,mBAZN,WAElB,IADA,IAAIC,EAAQ,GACHC,EAAI,EAAGA,EAAIN,EAAOM,IAAK,CAE9B,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,EAAIP,EAAOO,IACzBD,EAAIE,KAAKC,KAAKC,SAAWT,GAE3BG,EAAMI,KAAKF,GAEb,OAAOF,EAG0BO,IAboBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAX,EAAA,GAahDE,EAbgDQ,EAAA,GAazCG,EAbyCH,EAAA,GAAAI,EAc3Bb,oBAAS,GAdkBc,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAchDE,EAdgDD,EAAA,GAcxCE,EAdwCF,EAAA,GAiBjDG,EAAkB,SAACC,GACvBC,QAAQC,IAAIF,GACZ,IAAIG,EAAWpB,EAAMqB,QAFYC,EAGpBL,EAAMM,MAAM,KAAKC,IAAIC,QAHDC,EAAAjB,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAG5BK,EAH4BD,EAAA,GAGzBE,EAHyBF,EAAA,GAM3BG,EAAW,SAACF,EAAGC,GAGfA,GAAK,GAAKA,EAAIhC,GAAS+B,GAAK,GAAKA,EAAIhC,IACvCyB,EAASO,GAAGC,IAAMR,EAASO,GAAGC,KAIlCC,EAASF,EAAGC,GACZC,EAASF,EAAI,EAAGC,GAChBC,EAASF,EAAI,EAAGC,GAChBC,EAASF,EAAGC,EAAI,GAChBC,EAASF,EAAGC,EAAI,GAEhBjB,EAASS,GAET,IAAK,IAAInB,EAAI,EAAGA,EAAIN,EAAOM,IACzB,IAAKmB,EAASnB,GAAG6B,MAAM,SAACC,GAAD,OAAQA,IAE7B,YADAhB,GAAU,GAKdA,GAAU,IAORiB,EAAW,GACN/B,EAAI,EAAGA,EAAIN,EAAOM,IAAK,CAE9B,IADA,IAAIC,EAAM,GADoB+B,EAAA,SAErB9B,GACP,IAAIc,EAAK,GAAAiB,OAAMjC,EAAN,KAAAiC,OAAW/B,GACpBD,EAAIE,KAAKhB,EAAAC,EAAAC,cAAC6C,EAAD,CAAMC,IAAKnB,EAAOhC,kBAAmB,kBAAM+B,EAAgBC,IAAQ9B,MAAOa,EAAMC,GAAGE,OAFrFA,EAAI,EAAGA,EAAIP,EAAOO,IAAK8B,EAAvB9B,GAIT6B,EAAS5B,KAAKhB,EAAAC,EAAAC,cAAA,UAAKY,IAGrB,OACGY,EAWG1B,EAAAC,EAAAC,cAAA,yBATFF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SACfH,EAAAC,EAAAC,cAAA,aACG0C,OC/DEK,SARH,WACV,OACEjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACgD,EAAD,CAAO3C,MAAO,EAAGC,MAAO,EAAGC,oBAAqB,SCFtD0C,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.759cb28c.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Cell.css\"\n\nconst Cell = ({ flipCellsAroundMe, isLit }) => {\n\n  const handleClick = (evt) => {\n    flipCellsAroundMe();\n  }\n\n  let classes = \"Cell\" + (isLit ? \" Cell-lit\" : \"\");\n\n  return (\n    <td className={classes} onClick={handleClick} />\n  )\n\n}\n\n\nexport default Cell","import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nconst Board = ({ nrows, ncols, chanceLightStartsOn }) => {\n  const createBoard = () => {\n    let board = []\n    for (let i = 0; i < nrows; i++) {\n      let row = []\n      for (let j = 0; j < ncols; j++) {\n        row.push(Math.random() < chanceLightStartsOn)\n      }\n      board.push(row)\n    }\n    return board\n  }\n\n  const [board, setBoard] = useState(createBoard())\n  const [hasWon, setHasWon] = useState(false)\n\n\n  const flipCellsAround = (coord) => {\n    console.log(coord)\n    let newBoard = board.slice()\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    const flipCell = (y, x) => {\n\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        newBoard[y][x] = !newBoard[y][x];\n      }\n    }\n\n    flipCell(y, x)\n    flipCell(y + 1, x)\n    flipCell(y - 1, x)\n    flipCell(y, x + 1)\n    flipCell(y, x - 1)\n\n    setBoard(newBoard)\n\n    for (let i = 0; i < nrows; i++) {\n      if (!newBoard[i].every((n) => !n)) {\n        setHasWon(false)\n        return\n      }\n    }\n\n    setHasWon(true)\n\n\n  }\n\n\n\n  let tblBoard = []\n  for (let i = 0; i < nrows; i++) {\n    let row = []\n    for (let j = 0; j < ncols; j++) {\n      let coord = `${i}-${j}`\n      row.push(<Cell key={coord} flipCellsAroundMe={() => flipCellsAround(coord)} isLit={board[i][j]} />)\n    }\n    tblBoard.push(<tr>{row}</tr>)\n  }\n\n  return (\n    !hasWon\n      ?\n      <div>\n        <h1> Lights Out </h1>\n        <h2> Turn Off All of the Lights! </h2>\n        <table className='Board'>\n          <tbody>\n            {tblBoard}\n          </tbody>\n        </table>\n      </div>\n      : <h1> You won ! </h1>\n\n  )\n\n}\n\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className='App'>\n      <Board nrows={5} ncols={5} chanceLightStartsOn={0.25} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}